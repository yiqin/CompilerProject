- declare variable 'a' of type integer
program: external_declaration
- declare variable 'b' of type integer
program: program external_declaration
- declare variable 'c' of type integer
program: program external_declaration
- declare function 'foo2'
- flag 'foo2' as extern
program: program external_declaration
- declare function 'foo3'
- flag 'foo3' as extern
program: program external_declaration
- define function 'foo'
- declare variable 'i' of type integer
- declare variable 'sum' of type integer
- declare variable 'sum2' of type integer
primary_expression: CONST_INT
postfix_expression: primary_expression
unary_expression: postfix_expression
multiplicative_expression: unary_expression
additive_expression: multiplicative_expression
expression: additive_expression
assignment: IDENT '=' expression
expression_instruction: assignment ';'
instruction: expression_instruction
instruction_list: instruction
primary_expression: CONST_INT
postfix_expression: primary_expression
unary_expression: postfix_expression
multiplicative_expression: unary_expression
additive_expression: multiplicative_expression
expression: additive_expression
assignment: IDENT '=' expression
expression_instruction: assignment ';'
instruction: expression_instruction
instruction_list: instruction_list instruction
primary_expression: CONST_INT
postfix_expression: primary_expression
unary_expression: postfix_expression
multiplicative_expression: unary_expression
additive_expression: multiplicative_expression
expression: additive_expression
assignment: IDENT '=' expression
primary_expression: IDENT
postfix_expression: primary_expression
unary_expression: postfix_expression
multiplicative_expression: unary_expression
additive_expression: multiplicative_expression
expression: additive_expression
comparison_operator: LESSEQUAL
primary_expression: IDENT
postfix_expression: primary_expression
unary_expression: postfix_expression
multiplicative_expression: unary_expression
additive_expression: multiplicative_expression
expression: additive_expression
condition: expression comparison_operator expression
primary_expression: IDENT
postfix_expression: primary_expression
unary_expression: postfix_expression
multiplicative_expression: unary_expression
additive_expression: multiplicative_expression
primary_expression: CONST_INT
postfix_expression: primary_expression
unary_expression: postfix_expression
multiplicative_expression: unary_expression
additive_expression: additive_expression PLUS multiplicative_expression
expression: additive_expression
assignment: IDENT '=' expression
primary_expression: IDENT
postfix_expression: primary_expression
unary_expression: postfix_expression
multiplicative_expression: unary_expression
additive_expression: multiplicative_expression
primary_expression: IDENT
postfix_expression: primary_expression
unary_expression: postfix_expression
multiplicative_expression: unary_expression
additive_expression: multiplicative_expression
expression: additive_expression
argument_expression_list: expression
postfix_expression: IDENT '(' argument_expression_list ')'
unary_expression: postfix_expression
multiplicative_expression: unary_expression
additive_expression: additive_expression PLUS multiplicative_expression
expression: additive_expression
assignment: IDENT '=' expression
expression_instruction: assignment ';'
instruction: expression_instruction
iteration_instruction: FOR '(' assignment ';' condition ';' assignment ')' instruction
instruction: iteration_instruction
instruction_list: instruction_list instruction
primary_expression: IDENT
postfix_expression: primary_expression
unary_expression: postfix_expression
multiplicative_expression: unary_expression
additive_expression: multiplicative_expression
expression: additive_expression
jump_instruction: RETURN expression ';'
instruction: jump_instruction
instruction_list: instruction_list instruction
compound_instruction: block_start declaration_list instruction_list block_end
- declare function 'foo'
external_declaration: function_definition
program: program external_declaration

SYMBOL TABLES

global scope
    start: 1.1
    end:   1.1

  name               | type                      | attributes
---------------------+---------------------------+-----------------------
foo2                 | function, int             | extern
foo                  | function, int             | 
c                    | int                       | 
b                    | int                       | 
foo3                 | function, int, int        | extern
a                    | int                       | 

function scope - foo
    start: <stdin>:9.19
    end:   <stdin>:22.2

  name               | type                      | attributes
---------------------+---------------------------+-----------------------
sum2                 | int                       | 
sum                  | int                       | 
i                    | int                       | 
count                | int                       | function parameter

